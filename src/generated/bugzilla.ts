/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/bug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for bugs */
        get: operations["searchBugs"];
        put?: never;
        /** Create a bug */
        post: operations["createBug"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bug/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a bug by its ID */
        get: operations["getBug"];
        /** Update a bug */
        put: operations["updateBug"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bug/{id}/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comments on a bug */
        get: operations["getBugComments"];
        put?: never;
        /** Create comment on a bug */
        post: operations["createBugComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bug/{id}/attachment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get attachments on a bug */
        get: operations["getBugAttachments"];
        put?: never;
        /** Create an attachement on a bug */
        post: operations["createBugAttachment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bug/{id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get history for a bug */
        get: operations["getBugHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bug/attachment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an attachment */
        get: operations["getAttachment"];
        /** Update an attachment */
        put: operations["updateAttachment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bug/comment/{id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update tags on a comment */
        put: operations["updateCommentTag"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bug/comment/tags/{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for comment tags similar to the provided tag */
        get: operations["searchCommentTag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a component */
        post: operations["createComponent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a component or components */
        put: operations["updateComponent"];
        post?: never;
        /** Delete a component */
        delete: operations["deleteComponent"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/component/{product_name}/{component_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a component or components */
        put: operations["updateComponentByName"];
        post?: never;
        /** Delete a component */
        delete: operations["deleteComponentByName"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/extensions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the installed extensions of the Bugzilla instance */
        get: operations["getExtensions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/field/bug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all fields */
        get: operations["getFields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/field/bug/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a field by its ID */
        get: operations["getField"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flags_type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a flag */
        post: operations["createFlag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flags_type/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a flag or flags */
        put: operations["updateFlag"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flags_type/{product}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get flags on a product */
        get: operations["getFlagsByProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flags_type/{product}/{component}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get flags types on a component on a product */
        get: operations["getFlagsByProductAndComponent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for groups */
        get: operations["searchGroups"];
        put?: never;
        /** Create a group */
        post: operations["createGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a group by its ID */
        get: operations["getGroup"];
        /** Update a group or groups */
        put: operations["updateGroup"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/last_audit_time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the last audit timestamp */
        get: operations["getLastAuditTime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the parameters of the Bugzilla instance */
        get: operations["getParameters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for products */
        get: operations["searchProducts"];
        put?: never;
        /** Create a product */
        post: operations["createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product */
        get: operations["getProduct"];
        /** Update a product or products */
        put: operations["updateProduct"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the time on the Bugzilla instance */
        get: operations["getTime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timezone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the timezone on the Bugzilla instance */
        get: operations["getTimezone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for a user or users */
        get: operations["searchUsers"];
        put?: never;
        /** Create a user */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user */
        get: operations["getUser"];
        /** Update a user or users */
        put: operations["updateUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the version of the Bugzilla instance */
        get: operations["getVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the current user. */
        get: operations["whoAmI"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            email?: string;
            id?: number;
            name?: string;
            real_name?: string;
        };
        Flag: {
            id?: number;
            name?: string;
            type?: string;
            description?: string;
            values?: string[];
            is_requesteeble?: boolean;
            is_multiplicable?: boolean;
        };
        Bug: {
            /** Format: double */
            actual_time?: number;
            alias?: string[];
            assigned_to?: string;
            assigned_to_detail?: components["schemas"]["User"];
            blocks?: number[];
            cc?: string[];
            cc_detail?: components["schemas"]["User"][];
            classification?: string;
            component?: string;
            /** Format: date-time */
            creation_type?: string;
            creator?: string;
            creator_detail?: components["schemas"]["User"];
            deadline?: string;
            depends_on?: number[];
            dupe_of?: number;
            /** Format: double */
            estimated_time?: number;
            flags?: components["schemas"]["Flag"][];
            groups?: string[];
            id?: number;
            is_cc_accessible?: boolean;
            is_confirmed?: boolean;
            is_open?: boolean;
            is_creator_accessible?: boolean;
            keywords?: string[];
            /** Format: date-time */
            last_change_time?: string;
            op_sys?: string;
            platform?: string;
            priority?: string;
            product?: string;
            qa_contact?: string;
            qa_contact_detail?: components["schemas"]["User"];
            /** Format: double */
            remaining_time?: number;
            resolution?: string;
            see_also?: string[];
            severity?: string;
            status?: string;
            summary?: string;
            target_milestone?: string;
            update_token?: string;
            /** Format: url */
            url?: string;
            version?: string;
            whiteboard?: string;
        };
        BugResponse: {
            faults?: string[];
            bugs?: components["schemas"]["Bug"][];
        };
        CreateBug: {
            product: string;
            component: string;
            summary: string;
            version: string;
            description?: string;
            op_sys?: string;
            platform?: string;
            priority?: string;
            severity?: string;
            alias?: string[];
            assigned_to?: string;
            cc?: string[];
            comment_is_private?: boolean;
            comment_tags?: string[];
            is_markdown?: boolean;
            groups?: string[];
            keywords?: string[];
            qa_contact?: string;
            status?: string;
            resolution?: string;
            target_milestone?: string;
            flags?: components["schemas"]["Flag"][];
        };
        StringSet: {
            add?: string[];
            remove?: string[];
            set?: string[];
        };
        IntegerSet: {
            add?: number[];
            remove?: number[];
            set?: number[];
        };
        StringArray: {
            add?: string[];
            remove?: string[];
        };
        CreateComment: {
            comment: string;
            comment_tags?: string[];
            is_private?: boolean;
            is_markdown?: boolean;
            /** Format: double */
            work_time?: number;
        };
        UpdateFlag: {
            name?: string;
            type_id?: number;
            status?: string;
            requestee?: string;
            id?: number;
            new?: boolean;
        };
        UpdateBug: {
            alias?: components["schemas"]["StringSet"];
            assigned_to?: string;
            blocks?: components["schemas"]["IntegerSet"];
            depends_on?: components["schemas"]["IntegerSet"];
            cc?: components["schemas"]["StringArray"];
            is_cc_accessible?: boolean;
            comment?: components["schemas"]["CreateComment"];
            comment_is_private?: {
                [key: string]: boolean;
            };
            comment_tags?: string[];
            component?: string;
            /** Format: date */
            deadline?: string;
            dupe_of?: number;
            /** Format: double */
            estimated_time?: number;
            flags?: components["schemas"]["UpdateFlag"];
            groups?: components["schemas"]["StringArray"];
            keywords?: components["schemas"]["StringSet"];
            op_sys?: string;
            platform?: string;
            priority?: string;
            product?: string;
            qa_contact?: string;
            is_creator_accessible?: boolean;
            /** Format: double */
            remaining_time?: number;
            reset_assigned_to?: boolean;
            reset_qa_contact?: boolean;
            resolution?: string;
            see_also?: components["schemas"]["StringArray"];
            severity?: string;
            status?: string;
            summary?: string;
            target_milestone?: string;
            url?: string;
            version?: string;
            whiteboard?: string;
            /** Format: double */
            work_time?: number;
        };
        ChangeSet: {
            [key: string]: {
                added?: string;
                removed?: string;
            };
        };
        UpdateBugResponse: {
            bugs?: {
                id?: number;
                alias?: string[];
                /** Format: date-time */
                last_change_time?: string;
                changes?: components["schemas"]["ChangeSet"];
            };
        };
        Comment: {
            id?: number;
            bug_id?: number;
            attachment_id?: number;
            count?: number;
            text?: string;
            creator?: string;
            /** Format: date-time */
            creation_time?: string;
            is_private?: boolean;
            is_markdown?: boolean;
            tags?: string[];
        };
        CommentResponse: {
            comments?: components["schemas"]["Comment"];
            bugs?: {
                [key: string]: {
                    comments?: components["schemas"]["Comment"][];
                };
            };
        };
        GetAttachment: {
            /** Format: byte */
            data?: string;
            size?: number;
            /** Format: date-time */
            creation_time?: string;
            id?: number;
            bug_id?: number;
            file_name?: string;
            summary?: string;
            content_type?: string;
            is_private?: boolean;
            is_obsolete?: boolean;
            creator?: string;
        };
        GetAttachmentResponse: {
            bugs?: {
                [key: string]: components["schemas"]["GetAttachment"];
            };
            attachments?: {
                [key: string]: components["schemas"]["GetAttachment"];
            };
        };
        CreateAttachment: {
            ids: number[];
            /** Format: byte */
            data: string;
            file_name: string;
            summary: string;
            content_type: string;
            comment?: string;
            is_patch?: boolean;
            is_private?: boolean;
            is_markdown?: boolean;
            flags?: components["schemas"]["Flag"][];
        };
        ChangeResponse: {
            field_name?: string;
            added?: string;
            removed?: string;
            attachment_id?: number;
        };
        HistoryResponse: {
            /** Format: date-time */
            when?: string;
            who?: string;
            changes?: components["schemas"]["ChangeResponse"];
        };
        GetBugHistoryResponse: {
            id?: number;
            alias?: string[];
            history?: components["schemas"]["HistoryResponse"];
        };
        UpdateAttachment: {
            file_name?: string;
            summary?: string;
            comment?: string;
            is_markdown?: boolean;
            content_type?: string;
            is_patch?: boolean;
            is_private?: boolean;
            is_obsolete?: boolean;
            flags?: components["schemas"]["Flag"][];
        };
        UpdateAttachmentResponse: {
            attachments?: {
                id?: number;
                /** Format: date-time */
                last_change_time?: string;
                changes?: components["schemas"]["ChangeSet"];
            }[];
        };
        UpdateCommentTag: {
            comment_id: number;
            add?: string[];
            remove?: string[];
        };
        CommentTagResponse: string[];
        CreateComponent: {
            name?: string;
            product?: string;
            description?: string;
            default_assignee?: string;
            default_cc?: string[];
            default_qa_contact?: string;
            is_open?: boolean;
        };
        UpdateComponent: {
            ids?: number[];
            names?: number[];
            name?: string;
            description?: string;
            default_assignee?: string;
            default_cc?: string[];
            default_qa_contact?: string;
            is_open?: boolean;
        };
        UpdateComponentResponse: {
            components?: {
                changes?: components["schemas"]["ChangeSet"];
            }[];
        };
        DeleteComponent: {
            ids?: number[];
            names?: string[];
        };
        DeleteComponentResponse: {
            components?: {
                id?: number;
            }[];
        };
        GetExtensionsResponse: {
            [key: string]: {
                version?: string;
            };
        };
        FieldValue: {
            name?: string;
            sort_key?: number;
            visibility_values?: Record<string, never>[];
            is_active?: boolean;
            description?: string;
            is_open?: boolean;
            can_change_to?: {
                name?: string;
                comment_required?: boolean;
            }[];
        };
        Field: {
            id?: number;
            type?: number;
            is_custom?: boolean;
            name?: string;
            is_mandatory?: boolean;
            is_on_bug_entry?: boolean;
            visibility_field?: string;
            visibility_values?: components["schemas"]["FieldValue"][];
            value_field?: string;
            values?: components["schemas"]["FieldValue"][];
        };
        GetFieldResponse: {
            fields?: components["schemas"]["Field"][];
        };
        ItemMap: {
            [key: string]: string[];
        };
        CreateFlag: {
            name: string;
            description: string;
            /** @enum {string} */
            target_type?: "bug" | "attachment";
            inclusions?: components["schemas"]["ItemMap"];
            exclusions?: components["schemas"]["ItemMap"];
            sort_key?: number;
            is_active?: boolean;
            is_requestable?: boolean;
            is_specifically_requestable?: boolean;
            is_multiplicable?: boolean;
            grant_group?: string;
            request_group?: string;
            cc_list?: string[];
        };
        UpdateFlagResponse: {
            flagtypes?: {
                id?: number;
                name?: string;
                changes?: components["schemas"]["ChangeSet"];
            };
        };
        FlagTypes: {
            bug?: components["schemas"]["Flag"][];
            attachment?: components["schemas"]["Flag"][];
        };
        Group: {
            id?: number;
            name?: string;
            description?: string;
        };
        Search: {
            id?: number;
            name?: string;
            search?: string;
        };
        FullUser: {
            email?: string;
            id?: number;
            name?: string;
            real_name?: string;
            can_login?: boolean;
            email_enabled?: boolean;
            groups?: components["schemas"]["Group"][];
            saved_searches?: components["schemas"]["Search"][];
            saved_reports?: components["schemas"]["Search"][];
        };
        FullGroup: {
            membership?: components["schemas"]["FullUser"][];
            is_active?: boolean;
            description?: string;
            user_regexp?: string;
            is_bug_group?: boolean;
            name?: string;
            id?: number;
        };
        GroupResponse: {
            groups?: components["schemas"]["FullGroup"][];
        };
        CreateGroup: {
            name: string;
            description: string;
            user_regexp?: string;
            is_active?: boolean;
            icon_url?: string;
        };
        UpdateChangeSetResponse: {
            id?: number;
            changes?: components["schemas"]["ChangeSet"];
        }[];
        UpdateGroupResponse: {
            groups?: components["schemas"]["UpdateChangeSetResponse"];
        };
        /** @enum {string} */
        ProductType: "accessible" | "selectable" | "enterable";
        Component: {
            id?: number;
            name?: string;
            description?: string;
            default_assigned_to?: string;
            default_qa_contact?: string;
            sort_key?: number;
            is_active?: boolean;
            flag_types?: components["schemas"]["FlagTypes"];
        };
        Version: {
            name?: string;
            sort_key?: number;
            is_active?: boolean;
        };
        Milestone: {
            name?: string;
            sort_key?: number;
            is_active?: boolean;
        };
        Product: {
            id?: number;
            name?: string;
            description?: string;
            default_milestone?: string;
            has_unconfirmed?: boolean;
            classification?: string;
            components?: components["schemas"]["Component"][];
            versions?: components["schemas"]["Version"][];
            milestones?: components["schemas"]["Milestone"][];
        };
        GetProductResponse: {
            products?: components["schemas"]["Product"][];
        };
        CreateProduct: {
            name: string;
            version: string;
            has_unconfirmed?: boolean;
            classification?: string;
            default_milestone?: string;
            is_open?: boolean;
            create_series?: boolean;
        };
        UpdateProduct: {
            name?: string;
            default_milestone?: string;
            description?: string;
            has_unconfirmed?: boolean;
            is_open?: boolean;
        };
        UpdateProductResponse: {
            products?: components["schemas"]["UpdateChangeSetResponse"];
        };
        GetUserResponse: {
            users?: components["schemas"]["FullUser"][];
        };
        CreateUser: {
            login: string;
            email: string;
            password?: string;
            full_name?: string;
        };
        UpdateUser: {
            ids?: number[];
            names?: string[];
            full_name?: string;
            email?: string;
            password?: string;
            email_enabled?: boolean;
            login_denied_text?: string;
            groups?: components["schemas"]["IntegerSet"];
            bless_groups?: components["schemas"]["IntegerSet"];
        };
        UpdateUserResponse: {
            users?: components["schemas"]["UpdateChangeSetResponse"];
        };
        GetVersionResponse: {
            version?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    searchBugs: {
        parameters: {
            query?: {
                assigned_to?: string;
                component?: string;
                creation_time?: string;
                creator?: string;
                id?: number;
                last_change_time?: string;
                limit?: number;
                offset?: number;
                op_sys?: string;
                platform?: string;
                priority?: string;
                product?: string;
                resolution?: string;
                severity?: string;
                status?: string;
                summary?: string;
                tags?: string;
                target_milestone?: string;
                qa_contact?: string;
                url?: string;
                version?: string;
                whiteboard?: string;
                quicksearch?: string;
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BugResponse"];
                };
            };
        };
    };
    createBug: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateBug"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                    };
                };
            };
        };
    };
    getBug: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the bug */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BugResponse"];
                };
            };
        };
    };
    updateBug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the bug */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateBug"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBugResponse"];
                };
            };
        };
    };
    getBugComments: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the bug */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentResponse"];
                };
            };
        };
    };
    createBugComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the bug */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateComment"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                    };
                };
            };
        };
    };
    getBugAttachments: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the bug */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAttachmentResponse"];
                };
            };
        };
    };
    createBugAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the bug */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateAttachment"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ids?: number[];
                    };
                };
            };
        };
    };
    getBugHistory: {
        parameters: {
            query?: {
                new_since?: string;
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the bug */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBugHistoryResponse"];
                };
            };
        };
    };
    getAttachment: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the attachment */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAttachmentResponse"];
                };
            };
        };
    };
    updateAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the attachment */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateAttachment"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateAttachmentResponse"];
                };
            };
        };
    };
    updateCommentTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the comment to update tags on */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCommentTag"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentTagResponse"];
                };
            };
        };
    };
    searchCommentTag: {
        parameters: {
            query?: {
                /** @description The maximum number of tags to return */
                limit?: number;
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description The tag name or partial tag name to search for */
                tag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentTagResponse"];
                };
            };
        };
    };
    createComponent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateComponent"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                    };
                };
            };
        };
    };
    updateComponent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateComponent"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateComponentResponse"];
                };
            };
        };
    };
    deleteComponent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteComponent"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteComponentResponse"];
                };
            };
        };
    };
    updateComponentByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_name: string;
                component_name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateComponent"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateComponentResponse"];
                };
            };
        };
    };
    deleteComponentByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_name: string;
                component_name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteComponent"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteComponentResponse"];
                };
            };
        };
    };
    getExtensions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetExtensionsResponse"];
                };
            };
        };
    };
    getFields: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFieldResponse"];
                };
            };
        };
    };
    getField: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the field */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFieldResponse"];
                };
            };
        };
    };
    createFlag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateFlag"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                    };
                };
            };
        };
    };
    updateFlag: {
        parameters: {
            query?: {
                ids?: string[];
                names?: string[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateFlag"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateFlagResponse"];
                };
            };
        };
    };
    getFlagsByProduct: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                product: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagTypes"];
                };
            };
        };
    };
    getFlagsByProductAndComponent: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                product: string;
                component: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagTypes"];
                };
            };
        };
    };
    searchGroups: {
        parameters: {
            query?: {
                ids?: string[];
                names?: string[];
                membership?: boolean;
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
        };
    };
    createGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateGroup"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                    };
                };
            };
        };
    };
    getGroup: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the group */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
        };
    };
    updateGroup: {
        parameters: {
            query?: {
                ids?: string[];
                names?: string[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateGroup"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateGroupResponse"];
                };
            };
        };
    };
    getLastAuditTime: {
        parameters: {
            query?: {
                class?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: date-time */
                        last_audit_time?: string;
                    };
                };
            };
        };
    };
    getParameters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    searchProducts: {
        parameters: {
            query?: {
                ids?: string[];
                names?: string[];
                type?: components["schemas"]["ProductType"][];
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductResponse"];
                };
            };
        };
    };
    createProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateProduct"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                    };
                };
            };
        };
    };
    getProduct: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductResponse"];
                };
            };
        };
    };
    updateProduct: {
        parameters: {
            query?: {
                ids?: string[];
                names?: string[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProduct"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProductResponse"];
                };
            };
        };
    };
    getTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: date-time */
                        db_time?: string;
                        /** Format: date-time */
                        web_time?: string;
                    };
                };
            };
        };
    };
    getTimezone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        timezone?: string;
                    };
                };
            };
        };
    };
    searchUsers: {
        parameters: {
            query?: {
                ids?: number[];
                names?: string[];
                match?: string[];
                limit?: number;
                include_disabled?: boolean;
                group_ids?: number[];
                groups?: string[];
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponse"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateUser"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                    };
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: {
                /** @description Fields to be excluded from the results */
                exclude_fields?: string[];
                /** @description Fields to be included in the results */
                include_fields?: string[];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponse"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateUser"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateUserResponse"];
                };
            };
        };
    };
    getVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetVersionResponse"];
                };
            };
        };
    };
    whoAmI: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
